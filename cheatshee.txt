for >
truffle console

TtdmTokenSale.deployed().then(function(i){tokenSale=i;})

TtdmToken.deployed().then(function(i){ token=i; })

tokensAvailable = 75000

admin = web3.eth.accounts[0]


starting get in test mode

geth --rinkeby --rpc --rpcapi="personal,eth,network,web3,net" --ipcpath"~/Library/Ethereum/geth.ipc"

(#nao tinha funcionado porque em linux eh configuracao different seque abaixo
 versao pra differente platforms >>> https://ethereum.stackexchange.com/questions/1492/when-is-the-geth-ipc-file-produced
)


macOS

~/Library/Ethereum/

Linux

~/.ethereum/

Windows

~/AppData/Roaming/Ethereum
*********************************************************************************************************
geth --rinkeby --rpc --rpcapi="personal,eth,network,web3,net" --ipcpath "~/.ethereum/geth.ipc"

******************************************************************************
 mano lembra de COLOCAR SUDO e E CHEKAR ESPACOS TBM!!!
*************************************************************************************************

geth attach (*run this in other windows mat require root)

inside geth console

>eth.syncing




make new account @ https://youtu.be/XdKv5uwEk5A?t=24885
***************************************************
create account with rinkeby

geth --rinkeby account new

rinkeby account
Public address of the key:   0x6B1A354276ef2a7D9dd7F5291A912732f291F057
********************************************

>>>Public address of the key:   0x9EF95064a12f944E884C92edF90B23E9741e1A57

(****** make sure to be in side the geth attach first)

>eth.accounts
 show balance of accounts
>eth.getBalance(eth.accounts[0])

### unlockin account for a certain period of time
personal.unlockAccount(eth.accounts[0], null, 1200)

personal.unlockAccount(eth.accounts[0], null, 3300)

web3.personal.unlockAccount(0x6b1a354276ef2a7d9dd7f5291a912732f291f057, null)

--allow-insecure-unlock

personal.unlockAccount(web3.eth.accounts[0],null) --allow-insecure-unlock

******************************************************************************
git init
//inicia o program dentro do folder que vc tiver no terminal

git commit -m "ttdm first commit" .
 // manda pra la onde o folder foi aberto meu...

 git remote add origin https://github.com/Laddergrowth/ttdmToken.git
 // o nome quase jah dizzzz nehhh

 git push -u origin master
 // vai pedir username and pass


  If your editor or some other system is running git fetch in the background for you a way to mitigate this is to simply set up another remote:

               git remote add origin-push $(git config remote.origin.url)
               git fetch origin-push

           Now when the background process runs git fetch origin the references on origin-push won’t be updated, and thus commands like:

               git push --force-with-lease origin-push

           Will fail unless you manually run git fetch origin-push. This method is of course entirely defeated by something that runs git fetch --all, in that
           case you’d need to either disable it or do something more tedious like:

               git fetch              # update 'master' from remote
               git tag base master    # mark our base point
               git rebase -i master   # rewrite some commits
               git push --force-with-lease=master:base master:master

           I.e. create a base tag for versions of the upstream code that you’ve seen and are willing to overwrite, then rewrite history, and finally force push
           changes to master if the remote version is still at base, regardless of what your local remotes/origin/master has been updated to in the background.

after many attemps here is one last solution that did work

git push --force https://github.com/Laddergrowth/ttdmToken.git


*******************************************************************************************

